package com.blog.serviceImpl;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.blog.exception.ResourceNotFoundException;
import com.blog.model.Category;
import com.blog.model.Post;
import com.blog.model.User;
import com.blog.payload.PostDto;
import com.blog.repo.CategoryRepo;
import com.blog.repo.PostRepo;
import com.blog.repo.UserRepo;
import com.blog.service.PostService;
@Service
public class PostServiceImpl implements PostService {
@Autowired
private PostRepo postRepo;   
@Autowired
private ModelMapper modelMapper;
@Autowired
private UserRepo userRepo;
@Autowired
private CategoryRepo categoryRepo;
	@Override
	public PostDto createPost(PostDto postDto,Integer userId,Integer categoryId) {
		User user=this.userRepo.findById(userId).orElseThrow
				(()-> new ResourceNotFoundException("user with userid not found:"+userId));
		Category category=this.categoryRepo.findById(categoryId).orElseThrow(()->new ResourceNotFoundException("category with categoryId not found:"+categoryId));
		Post post=this.modelMapper.map(postDto, Post.class);
		post.setImageName("default.png");
		post.setAddedDate(new Date());
		post.setUser(user);
		post.setCategory(category);
		Post newPost=this.postRepo.save(post);
		return this.modelMapper.map(newPost, PostDto.class);
	}

	@Override
	public PostDto updatePost(PostDto postDto, Integer postId) {
		Post post=this.postRepo.findById(postId).orElseThrow
		(()-> new ResourceNotFoundException("post with postid not found:"+postId));
		post.setAddedDate(postDto.getAddedDate());
		this.postRepo.save(post);
		return null;
	}

	@Override
	public void deletePost(Integer postId) {
		// TODO Auto-generated method stub

	}

	@Override
	public PostDto getPostById(Integer postId) {
		Post post=this.postRepo.findById(postId).orElseThrow(()->new ResourceNotFoundException("post with postId not found:"+postId));
		return this.modelMapper.map(post, PostDto.class);
	}

	@Override
	public List<PostDto> getall() {
		List<Post>postDto=this.postRepo.findAll();
		List<PostDto>postDt=postDto.stream().map((post)->this.modelMapper.map(post, PostDto.class)).collect(Collectors.toList());
		return postDt;
	}

	@Override
	public List<PostDto> getPostByUser(Integer userId) {
		User user=this.userRepo.findById(userId).orElseThrow(()->new ResourceNotFoundException("user with userId not found:" +userId));
		List<Post>post=this.postRepo.findByUser(user);
		          List<PostDto>postDto=post.stream().map((pos)->this.modelMapper.map(pos, PostDto.class)).collect(Collectors.toList());
		return postDto;
	}

	@Override
	public List<PostDto> getPostByCategory(Integer categoryId) {
		Category cate=this.categoryRepo.findById(categoryId).orElseThrow(()->new ResourceNotFoundException("category with categoryId not found:"+categoryId));
		   List<Post>post=this.postRepo.findByCategory(cate);
		  List<PostDto> postDto= post.stream().map((pos)->this.modelMapper.map(pos, PostDto.class)).collect(Collectors.toList());
		return postDto;
	}

	@Override
	public List<PostDto> searchPosts(String keyword) {
		// TODO Auto-generated method stub
		return null;
	}

}
