package com.blog.controller;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.blog.payload.ApiResponse;
import com.blog.payload.PostDto;
import com.blog.payload.PostResponse;
import com.blog.service.FileService;
import com.blog.service.PostService;

import jakarta.servlet.http.HttpServletResponse;

@RestController
@RequestMapping("/app/")
public class PostController {
@Autowired
private PostService postService;
@Autowired
private FileService fileService;
@Value("${project.image}")
private String path;
@PostMapping("/create/user/{userId}/category/{categoryId}")
public ResponseEntity<PostDto>createPost(@RequestBody PostDto postDto,@PathVariable Integer userId,@PathVariable Integer categoryId){
	       PostDto creatPost =this.postService.createPost(postDto, userId, categoryId);
	return new ResponseEntity<PostDto>(creatPost,HttpStatus.CREATED);
	
}
@PutMapping("/{postId}")
public ResponseEntity<PostDto>updatePost(@RequestBody PostDto postDto,@PathVariable Integer postId){
	PostDto post1=this.postService.updatePost(postDto, postId);
	return new ResponseEntity<PostDto>(post1,HttpStatus.OK);
	
}
@GetMapping("/user/{userId}/posts")
public ResponseEntity<List<PostDto>>getByUserId(@PathVariable Integer userId){
	  List<PostDto>post=this.postService.getPostByUser(userId);
	  return new ResponseEntity<List<PostDto>>(post,HttpStatus.OK);
	  
}
@GetMapping("/category/{categoryId}/posts")
public ResponseEntity<List<PostDto>>getByCategoryId(@PathVariable Integer categoryId){
	  List<PostDto>post=this.postService.getPostByCategory(categoryId);
	  return new ResponseEntity<List<PostDto>>(post,HttpStatus.OK);
	  
}
@GetMapping("/getall")
public ResponseEntity<PostResponse> getallpost(@RequestParam(value="pageNumber",defaultValue="0"
,required=false)Integer pageNumber, @RequestParam(value="pageSize",defaultValue="5",required=false)
Integer pageSize,@RequestParam(value="sortBy",defaultValue="postId",required=false)String 
sortBy,@RequestParam(value="sortDir",defaultValue="asc",required=false)String sortDir){
	PostResponse postResponse = this.postService.getall(pageNumber,pageSize,sortBy,sortDir);
	return ResponseEntity.ok(postResponse);
}
@GetMapping("/{postId}")
public ResponseEntity<PostDto>findById(@PathVariable Integer postId){
	PostDto post=this.postService.getPostById(postId);
	return new ResponseEntity<>(post,HttpStatus.OK);
}
@DeleteMapping("/{postId}")
public ResponseEntity<ApiResponse>deleteById(@PathVariable Integer postId){
	this.postService.deletePost(postId);
	return new ResponseEntity<ApiResponse>(new ApiResponse("post with postid deleted successfully",true),HttpStatus.OK);
	
}
@GetMapping("/posts/search/{keywords}")
public ResponseEntity<List<PostDto>>searchPostByTitle(@PathVariable("keywords")String keywords){
	   List<PostDto> result = this.postService.searchPosts(keywords);
	   return new ResponseEntity<List<PostDto>>(result,HttpStatus.OK);
}
//upload image
@PostMapping("/post/image/upload/{postId}")
public ResponseEntity<PostDto>uploadPostImage(@RequestParam("image")MultipartFile image,@PathVariable Integer postId) throws IOException{
	PostDto postDto=this.postService.getPostById(postId);
	String fileName=this.fileService.uploadImage(path, image);
	postDto.setImageName(fileName);
	PostDto updatePost=this.postService.updatePost(postDto, postId);
	return new ResponseEntity<PostDto>(updatePost,HttpStatus.OK);
}
//serving the image
@GetMapping(value="post/image/{imageName}",produces=MediaType.IMAGE_JPEG_VALUE)
public void downloadImage(@PathVariable("imageName")String imageName,HttpServletResponse response) throws IOException {
	InputStream resource=this.fileService.getResource(path, imageName);
	response.setContentType(MediaType.IMAGE_JPEG_VALUE);
	StreamUtils.copy(resource, response.getOutputStream());
	
}
}
