package com.blog.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.blog.security.CustomUserDetailService;
import com.blog.security.JwtAuthenticationEntryPoint;

import static org.springframework.security.config.Customizer.withDefaults;
import com.blog.security.JwtAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig  {
	@Autowired
	private CustomUserDetailService customService;

	/*
	 * @Autowired private JwtAuthenticationEntryPoint point;
	 * 
	 * @Autowired private JwtAuthenticationFilter filter;
	 */

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable())
                .authorizeHttpRequests()
                .anyRequest()
                .authenticated()
                .and()
                .httpBasic(withDefaults());
        return http.build();
    }
    @Bean
    public AuthenticationManager authenticationManagerBean(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

		/*
		 * http.csrf(csrf -> csrf.disable()) .authorizeRequests(requests -> requests.
		 * antMatchers("/app").authenticated().antMatchers("/auth/login").permitAll()
		 * .anyRequest() .authenticated()).exceptionHandling(ex ->
		 * ex.authenticationEntryPoint(point)) .sessionManagement(session ->
		 * session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		 * http.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);
		 * return http.build();
		 */
    
  }
}